program ::= "STARTPROGRAM", "STARTBLOCK", {"VARIABLE", variable_declaration, ";"}, {statement, ";"}, "ENDBLOCK";
variable_declaration ::= "INT16", variable_list;
variable_list ::= identifier, {",", identifier};
identifier ::= "_", up, low, low, low, low;
up_low ::= up | low | digit;
up ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";
low ::= a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
statement ::= input_statement | output_statement | assign_statement | if_else_statement | goto_statement | label_point | for_statement | while_statement | repeat_until_statement | compound_statement;
input_statement ::= "INPUT", identifier;
output_statement ::= "OUTPUT", arithmetic_expression;
arithmetic_expression ::= low_priority_expression {low_priority_operator, low_priority_expression};
low_priority_operator ::= "+" | "-";
low_priority_expression ::= middle_priority_expression {middle_priority_operator, middle_priority_expression};
middle_priority_operator ::= "*" | "DIV" | "MOD";
middle_priority_expression ::= identifier | number | "(", arithmetic_expression, ")";
number ::= ["-"], d;
assign_statement ::= arithmetic_expression, "==>", identifier;
if_else_statement ::= "IF", "(", logical_expression, ")", statement, [";", "ELSE", statement];
logical_expression ::= and_expression {or_operator, and_expression};
or_operator ::= "||";
and_expression ::= comparison {and_operator, and_expression};
and_operator ::= "&&";
comparison ::= comparison_expression | [not_operator] "(", logical_expression, ")";
not_operator ::= "!!";
comparison_expression ::= arithmetic_expression comparison_operator arithmetic_expression;
comparison_operator ::= "=" | "!=" | "<<" | ">>";
goto_statement ::= "GOTO", identifier;
label_point ::= identifier, ":";
for_to_statement ::= "FOR", assign_statement, "TO" | "DOWNTO", arithmetic_expression, "DO", statement;
while_statement ::= "WHILE", logical_expression, {statement, ";"}, "WEND";
repeat_until_statement ::= "REPEAT", {statement, ";"}, "UNTIL", "(", logical_expression, ")";
compoundStatement ::= {statement, ";"};